name: Deploy API to Staging

on:
  workflow_dispatch:
    # inputs:
    #   commit:
    #     description: "Branch/Commit ref"
    #     default: ""
    #     required: true
    #     type: string
    #

jobs:
  release:
      # needs: [deploy-staging]

      # The type of runner that the job will run on
      runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3
          with:
            ref: ${{ github.event.inputs.commit }}
            fetch-depth: 0

        - name: Version
          # https://github.com/marketplace/actions/git-semantic-version
          id: version
          uses: paulhatch/semantic-version@v5.0.2
          with:
            tag_prefix: "v"
            major_pattern: "(MAJOR)"
            major_regexp_flags: ""
            minor_pattern: "(MINOR)"
            minor_regexp_flags: ""
            bump_each_commit: false
            user_format_type: "csv"

        - name: Release
          # https://github.com/ncipollo/release-action
          uses: ncipollo/release-action@v1
          with:
            allowUpdates: true
            # token: ${{ secrets.GITHUB_TOKEN }}
            generateReleaseNotes: true
            name: Scorer API ${{ steps.version.outputs.version }}
            tag: ${{ steps.version.outputs.version_tag }}
            draft: true

        - name: Echo
          run: |
            echo tag ${{ steps.version.outputs.version_tag }}
            echo version ${{ steps.version.outputs.version }}
            
    test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
        - name: Load Vars
          id: vars
          run: echo "tag=$(git rev-list --tags --max-count=100 | xargs git describe --tags --match='v*.*' | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' | head -n1)" >> $GITHUB_OUTPUT
        - name: Check output
          env:
            RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
          run: |
            echo ${{env.RELEASE_VERSION}}
            LATEST_TAG=$(git rev-list --tags --max-count=100 | xargs git describe --tags --match='v*.*' | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' | head -n1)
            echo $LATEST_TAG
            
            # get the last 100 commits that have a tag, most recent first
            # get the actual tag text for tags in these commits that match v*.*
            # filter to tags matching v0.0 or v0.0.0, because there will be sub-tags for subsequent commits before another release
            # get the top one (latest)
            echo `git rev-list --tags --max-count=100 | xargs git describe --tags --match='v*.*' | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' | head -n1`
