name: Release and Deploy

on:
  workflow_call:
    inputs:
      repo_owner:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      staging_frontend_branch:
        required: true
        type: string
      production_frontend_branch:
        required: true
        type: string
      staging_domain: 
        required: true
        type: string
      production_domain:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string

jobs:
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
          ref: main
          fetch-depth: 0

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: Lerna Bootstrap
        run: echo lerna bootstrap

      - name: Run Tests
        run: |
          echo yarn test

      - name: Run Linter
        run: |
          echo yarn lint

      - name: Version
        # https://github.com/marketplace/actions/git-semantic-version
        id: version
        uses: paulhatch/semantic-version@v5.0.2
        with:
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"

      - name: Release
        # https://github.com/ncipollo/release-action
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          token: ${{ secrets.github_token }}
          generateReleaseNotes: true
          name: ${{ steps.version.outputs.version }}
          tag: ${{ steps.version.outputs.version_tag }}

      - name: Store Commit SHA
        id: sha
        shell: bash
        run: |
          git pull --tags
          echo "sha_short=$(git rev-parse --short ${{ steps.version.outputs.version_tag }})" >> $GITHUB_OUTPUT

    outputs:
      version_tag: ${{ steps.version.outputs.version_tag }}
      commit_sha: ${{ steps.sha.outputs.sha_short }}

  deploy_staging_frontend:
    permissions: write-all
    needs: [release]
    uses: gitcoinco/gh-workflows/.github/workflows/deploy_to_branch.yml@main
    with:
      owner: ${{ inputs.repo_owner }}
      repo: ${{ inputs.repo_name }}
      refspec: ${{ needs.release.outputs.version_tag }}
      destination_branch: ${{ inputs.staging_frontend_branch }}

  dockerize:
    needs: [release]
    uses: gitcoinco/gh-workflows/.github/workflows/dockerize.yml@main
    with:
      repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
      refspec: ${{ needs.release.outputs.version_tag }}
      docker_tag: ${{ needs.release.outputs.commit_sha }}
      ecr_repository: ${{ inputs.ecr_repository }}
    secrets:
      aws_access_key_id: ${{ secrets.aws_access_key_id_staging }}
      aws_secret_access_key: ${{ secrets.aws_secret_access_key_staging }}

  deploy_staging_backend:
    needs: [release,dockerize]
    uses: gitcoinco/gh-workflows/.github/workflows/deploy_to_aws.yml@main
    with:
      repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
      refspec: ${{ needs.release.outputs.version_tag }}
      docker_tag: ${{ needs.release.outputs.commit_sha }}
      env_name: staging
      domain: ${{ inputs.staging_domain }}
    secrets:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
      ECR_URL: ${{secrets.ECR_URL_STAGING}}
      ROUTE53_ZONE_ID: ${{ secrets.ROUTE53_ZONE_ID_STAGING }}
      IAM_SERVER_SSM_ARN: ${{ secrets.IAM_SERVER_SSM_ARN_STAGING }}

  wait_for_production_approval:
    needs: [deploy_staging_backend,deploy_staging_frontend,release]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Approve Release to Production
        run: |
          echo "Approved Production Release for: " ${{ needs.release.outputs.version_tag }}

  deploy_production_frontend:
    permissions: write-all
    needs: [wait_for_production_approval,release]
    uses: gitcoinco/gh-workflows/.github/workflows/deploy_to_branch.yml@main
    with:
      owner: ${{ inputs.repo_owner }}
      repo: ${{ inputs.repo_name }}
      refspec: ${{ needs.release.outputs.version_tag }}
      destination_branch: ${{ inputs.production_frontend_branch }}

  deploy_production_backend:
    needs: [wait_for_production_approval,release]
    uses: gitcoinco/gh-workflows/.github/workflows/deploy_to_aws.yml@main
    with:
      repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
      refspec: ${{ needs.release.outputs.version_tag }}
      docker_tag: ${{ needs.release.outputs.commit_sha }}
      env_name: production
      domain: ${{ inputs.production_domain }}
    secrets:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
      ECR_URL: ${{secrets.ECR_URL_PRODUCTION}}
      ROUTE53_ZONE_ID: ${{ secrets.ROUTE53_ZONE_ID_PRODUCTION }}
      IAM_SERVER_SSM_ARN: ${{ secrets.IAM_SERVER_SSM_ARN_PRODUCTION }}
